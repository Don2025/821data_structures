#include "TianQin.h"
using namespace std;

/* 直接插入排序
 * 最坏的情况O(n^2)：整个序列是逆序的，则内层循环中temp<A[j]始终成立，内层序号次数达到最大值。总执行次数为 n(n-1)/2
 * 最好的情况O(n)：整个序列已经有序，则内层循环中temp<A[j]始终不成立，双层循环就变成了单层循环，循环内的操作均为常数级
 * 综上所述，平均时间复杂度为O(n^2)
 * 算法所需的辅助存储空间不随待排序数列规模的变化而变化，是个常量，故空间复杂度为O(1)
**/
void InsertSort(int A[], int n) {
    int j,temp;
    for(int i = 1; i < n; ++i) {
        temp = A[i];  //将待插入关键字暂存于temp中
        j = i-1;
        //下面这个while循环完成了从待排序关键字之前的关键字扫描，如果大于待排关键字则后移一位
        while(j>=0 && temp<A[j]) {
            A[j+1] = A[j];
            --j;
        }
        A[j+1] = temp;   //找到插入位置就插入
    }
}

